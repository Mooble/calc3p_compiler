Terminals unused in grammar

   PROG
   CALL
   ARGS


State 39 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: function

    2 function: stmt function
    3         | PROC VARIABLE '(' ')' '{' stmt '}' function
    4         | PROC VARIABLE '(' param_list ')' '{' stmt '}' function
    5         | FUNC TYPE VARIABLE '(' ')' '{' stmt '}' function
    6         | FUNC TYPE VARIABLE '(' param_list ')' '{' stmt '}' function
    7         | /* empty */

    8 param_list: TYPE VARIABLE
    9           | TYPE VARIABLE ',' param_list

   10 def_var: TYPE VARIABLE

   11 stmt: ';'
   12     | COMMENT
   13     | expr ';'
   14     | def_var ';'
   15     | PRINT expr ';'
   16     | VARIABLE '=' expr ';'
   17     | VARIABLE PluE expr ';'
   18     | VARIABLE MinE expr ';'
   19     | VARIABLE MulE expr ';'
   20     | VARIABLE DivE expr ';'
   21     | VARIABLE ModE expr ';'
   22     | WHILE '(' expr ')' stmt
   23     | DO stmt WHILE '(' expr ')'
   24     | DO stmt UNTIL '(' expr ')'
   25     | FOR '(' VARIABLE '=' expr STEP expr TO expr ')' stmt
   26     | IF '(' expr ')' stmt
   27     | IF '(' expr ')' stmt ELSE stmt
   28     | '{' stmt_list '}'
   29     | VARIABLE '(' ')'
   30     | VARIABLE '(' arg_list ')'
   31     | RETURN expr

   32 arg_list: expr
   33         | expr ',' arg_list

   34 stmt_list: stmt
   35          | stmt_list stmt

   36 expr: INTEGER
   37     | FLOAT
   38     | VARIABLE
   39     | '-' expr
   40     | expr '+' expr
   41     | expr '-' expr
   42     | expr '*' expr
   43     | expr '/' expr
   44     | expr '<' expr
   45     | expr '>' expr
   46     | expr '%' expr
   47     | expr GE expr
   48     | expr LE expr
   49     | expr NE expr
   50     | expr EQ expr
   51     | '(' expr ')'


Terminals, with rules where they appear

$end (0) 0
'%' (37) 46
'(' (40) 3 4 5 6 22 23 24 25 26 27 29 30 51
')' (41) 3 4 5 6 22 23 24 25 26 27 29 30 51
'*' (42) 42
'+' (43) 40
',' (44) 9 33
'-' (45) 39 41
'/' (47) 43
';' (59) 11 13 14 15 16 17 18 19 20 21
'<' (60) 44
'=' (61) 16 25
'>' (62) 45
'{' (123) 3 4 5 6 28
'}' (125) 3 4 5 6 28
error (256)
INTEGER (258) 36
FLOAT (259) 37
VARIABLE (260) 3 4 5 6 8 9 10 16 17 18 19 20 21 25 29 30 38
TYPE (261) 5 6 8 9 10
DO (262) 23 24
UNTIL (263) 24
WHILE (264) 22 23
IF (265) 26 27
PRINT (266) 15
FOR (267) 25
STEP (268) 25
TO (269) 25
COMMENT (270) 12
PROG (271)
PROC (272) 3 4
FUNC (273) 5 6
CALL (274)
ARGS (275)
RETURN (276) 31
IFX (277)
ELSE (278) 27
PROC_STMT (279)
PROC_ARG_STMT (280)
FUNC_STMT (281)
FUNC_ARG_STMT (282)
NE (283) 49
EQ (284) 50
LE (285) 48
GE (286) 47
ModE (287) 21
DivE (288) 20
MulE (289) 19
MinE (290) 18
PluE (291) 17
UMINUS (292)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
function (54)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
param_list (55)
    on left: 8 9, on right: 4 6 9
def_var (56)
    on left: 10, on right: 14
stmt (57)
    on left: 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    29 30 31, on right: 2 3 4 5 6 22 23 24 25 26 27 34 35
arg_list (58)
    on left: 32 33, on right: 30 33
stmt_list (59)
    on left: 34 35, on right: 28 35
expr (60)
    on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51, on right:
    13 15 16 17 18 19 20 21 22 23 24 25 26 27 31 32 33 39 40 41 42
    43 44 45 46 47 48 49 50 51


state 0

    0 $accept: . program $end

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    PROC      shift, and go to state 11
    FUNC      shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    $default  reduce using rule 7 (function)

    program   go to state 18
    function  go to state 19
    def_var   go to state 20
    stmt      go to state 21
    expr      go to state 22


state 1

   36 expr: INTEGER .

    $default  reduce using rule 36 (expr)


state 2

   37 expr: FLOAT .

    $default  reduce using rule 37 (expr)


state 3

   16 stmt: VARIABLE . '=' expr ';'
   17     | VARIABLE . PluE expr ';'
   18     | VARIABLE . MinE expr ';'
   19     | VARIABLE . MulE expr ';'
   20     | VARIABLE . DivE expr ';'
   21     | VARIABLE . ModE expr ';'
   29     | VARIABLE . '(' ')'
   30     | VARIABLE . '(' arg_list ')'
   38 expr: VARIABLE .

    ModE  shift, and go to state 23
    DivE  shift, and go to state 24
    MulE  shift, and go to state 25
    MinE  shift, and go to state 26
    PluE  shift, and go to state 27
    '('   shift, and go to state 28
    '='   shift, and go to state 29

    $default  reduce using rule 38 (expr)


state 4

   10 def_var: TYPE . VARIABLE

    VARIABLE  shift, and go to state 30


state 5

   23 stmt: DO . stmt WHILE '(' expr ')'
   24     | DO . stmt UNTIL '(' expr ')'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 31
    expr     go to state 22


state 6

   22 stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 32


state 7

   26 stmt: IF . '(' expr ')' stmt
   27     | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 33


state 8

   15 stmt: PRINT . expr ';'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 35


state 9

   25 stmt: FOR . '(' VARIABLE '=' expr STEP expr TO expr ')' stmt

    '('  shift, and go to state 36


state 10

   12 stmt: COMMENT .

    $default  reduce using rule 12 (stmt)


state 11

    3 function: PROC . VARIABLE '(' ')' '{' stmt '}' function
    4         | PROC . VARIABLE '(' param_list ')' '{' stmt '}' function

    VARIABLE  shift, and go to state 37


state 12

    5 function: FUNC . TYPE VARIABLE '(' ')' '{' stmt '}' function
    6         | FUNC . TYPE VARIABLE '(' param_list ')' '{' stmt '}' function

    TYPE  shift, and go to state 38


state 13

   31 stmt: RETURN . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 39


state 14

   39 expr: '-' . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 40


state 15

   51 expr: '(' . expr ')'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 41


state 16

   28 stmt: '{' . stmt_list '}'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var    go to state 20
    stmt       go to state 42
    stmt_list  go to state 43
    expr       go to state 22


state 17

   11 stmt: ';' .

    $default  reduce using rule 11 (stmt)


state 18

    0 $accept: program . $end

    $end  shift, and go to state 44


state 19

    1 program: function .

    $default  reduce using rule 1 (program)


state 20

   14 stmt: def_var . ';'

    ';'  shift, and go to state 45


state 21

    2 function: stmt . function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    PROC      shift, and go to state 11
    FUNC      shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    $default  reduce using rule 7 (function)

    function  go to state 46
    def_var   go to state 20
    stmt      go to state 21
    expr      go to state 22


state 22

   13 stmt: expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ';'  shift, and go to state 58


state 23

   21 stmt: VARIABLE ModE . expr ';'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 59


state 24

   20 stmt: VARIABLE DivE . expr ';'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 60


state 25

   19 stmt: VARIABLE MulE . expr ';'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 61


state 26

   18 stmt: VARIABLE MinE . expr ';'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 62


state 27

   17 stmt: VARIABLE PluE . expr ';'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 63


state 28

   29 stmt: VARIABLE '(' . ')'
   30     | VARIABLE '(' . arg_list ')'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    ')'       shift, and go to state 64

    arg_list  go to state 65
    expr      go to state 66


state 29

   16 stmt: VARIABLE '=' . expr ';'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 67


state 30

   10 def_var: TYPE VARIABLE .

    $default  reduce using rule 10 (def_var)


state 31

   23 stmt: DO stmt . WHILE '(' expr ')'
   24     | DO stmt . UNTIL '(' expr ')'

    UNTIL  shift, and go to state 68
    WHILE  shift, and go to state 69


state 32

   22 stmt: WHILE '(' . expr ')' stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 70


state 33

   26 stmt: IF '(' . expr ')' stmt
   27     | IF '(' . expr ')' stmt ELSE stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 71


state 34

   38 expr: VARIABLE .

    $default  reduce using rule 38 (expr)


state 35

   15 stmt: PRINT expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ';'  shift, and go to state 72


state 36

   25 stmt: FOR '(' . VARIABLE '=' expr STEP expr TO expr ')' stmt

    VARIABLE  shift, and go to state 73


state 37

    3 function: PROC VARIABLE . '(' ')' '{' stmt '}' function
    4         | PROC VARIABLE . '(' param_list ')' '{' stmt '}' function

    '('  shift, and go to state 74


state 38

    5 function: FUNC TYPE . VARIABLE '(' ')' '{' stmt '}' function
    6         | FUNC TYPE . VARIABLE '(' param_list ')' '{' stmt '}' function

    VARIABLE  shift, and go to state 75


state 39

   31 stmt: RETURN expr .
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    '-'       [reduce using rule 31 (stmt)]
    $default  reduce using rule 31 (stmt)


state 40

   39 expr: '-' expr .
   40     | expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    $default  reduce using rule 39 (expr)


state 41

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr
   51     | '(' expr . ')'

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ')'  shift, and go to state 76


state 42

   34 stmt_list: stmt .

    $default  reduce using rule 34 (stmt_list)


state 43

   28 stmt: '{' stmt_list . '}'
   35 stmt_list: stmt_list . stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    '}'       shift, and go to state 77
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 78
    expr     go to state 22


state 44

    0 $accept: program $end .

    $default  accept


state 45

   14 stmt: def_var ';' .

    $default  reduce using rule 14 (stmt)


state 46

    2 function: stmt function .

    $default  reduce using rule 2 (function)


state 47

   45 expr: expr '>' . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 79


state 48

   44 expr: expr '<' . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 80


state 49

   49 expr: expr NE . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 81


state 50

   50 expr: expr EQ . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 82


state 51

   48 expr: expr LE . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 83


state 52

   47 expr: expr GE . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 84


state 53

   40 expr: expr '+' . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 85


state 54

   41 expr: expr '-' . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 86


state 55

   42 expr: expr '*' . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 87


state 56

   43 expr: expr '/' . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 88


state 57

   46 expr: expr '%' . expr

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 89


state 58

   13 stmt: expr ';' .

    $default  reduce using rule 13 (stmt)


state 59

   21 stmt: VARIABLE ModE expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ';'  shift, and go to state 90


state 60

   20 stmt: VARIABLE DivE expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ';'  shift, and go to state 91


state 61

   19 stmt: VARIABLE MulE expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ';'  shift, and go to state 92


state 62

   18 stmt: VARIABLE MinE expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ';'  shift, and go to state 93


state 63

   17 stmt: VARIABLE PluE expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ';'  shift, and go to state 94


state 64

   29 stmt: VARIABLE '(' ')' .

    $default  reduce using rule 29 (stmt)


state 65

   30 stmt: VARIABLE '(' arg_list . ')'

    ')'  shift, and go to state 95


state 66

   32 arg_list: expr .
   33         | expr . ',' arg_list
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ','  shift, and go to state 96

    $default  reduce using rule 32 (arg_list)


state 67

   16 stmt: VARIABLE '=' expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ';'  shift, and go to state 97


state 68

   24 stmt: DO stmt UNTIL . '(' expr ')'

    '('  shift, and go to state 98


state 69

   23 stmt: DO stmt WHILE . '(' expr ')'

    '('  shift, and go to state 99


state 70

   22 stmt: WHILE '(' expr . ')' stmt
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ')'  shift, and go to state 100


state 71

   26 stmt: IF '(' expr . ')' stmt
   27     | IF '(' expr . ')' stmt ELSE stmt
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ')'  shift, and go to state 101


state 72

   15 stmt: PRINT expr ';' .

    $default  reduce using rule 15 (stmt)


state 73

   25 stmt: FOR '(' VARIABLE . '=' expr STEP expr TO expr ')' stmt

    '='  shift, and go to state 102


state 74

    3 function: PROC VARIABLE '(' . ')' '{' stmt '}' function
    4         | PROC VARIABLE '(' . param_list ')' '{' stmt '}' function

    TYPE  shift, and go to state 103
    ')'   shift, and go to state 104

    param_list  go to state 105


state 75

    5 function: FUNC TYPE VARIABLE . '(' ')' '{' stmt '}' function
    6         | FUNC TYPE VARIABLE . '(' param_list ')' '{' stmt '}' function

    '('  shift, and go to state 106


state 76

   51 expr: '(' expr ')' .

    $default  reduce using rule 51 (expr)


state 77

   28 stmt: '{' stmt_list '}' .

    $default  reduce using rule 28 (stmt)


state 78

   35 stmt_list: stmt_list stmt .

    $default  reduce using rule 35 (stmt_list)


state 79

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   45     | expr '>' expr .
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    $default  reduce using rule 45 (expr)


state 80

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   44     | expr '<' expr .
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    $default  reduce using rule 44 (expr)


state 81

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   49     | expr NE expr .
   50     | expr . EQ expr

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    $default  reduce using rule 49 (expr)


state 82

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr
   50     | expr EQ expr .

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    $default  reduce using rule 50 (expr)


state 83

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   48     | expr LE expr .
   49     | expr . NE expr
   50     | expr . EQ expr

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    $default  reduce using rule 48 (expr)


state 84

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   47     | expr GE expr .
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    $default  reduce using rule 47 (expr)


state 85

   40 expr: expr . '+' expr
   40     | expr '+' expr .
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    $default  reduce using rule 40 (expr)


state 86

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   41     | expr '-' expr .
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    $default  reduce using rule 41 (expr)


state 87

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   42     | expr '*' expr .
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    $default  reduce using rule 42 (expr)


state 88

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   43     | expr '/' expr .
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    $default  reduce using rule 43 (expr)


state 89

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   46     | expr '%' expr .
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    $default  reduce using rule 46 (expr)


state 90

   21 stmt: VARIABLE ModE expr ';' .

    $default  reduce using rule 21 (stmt)


state 91

   20 stmt: VARIABLE DivE expr ';' .

    $default  reduce using rule 20 (stmt)


state 92

   19 stmt: VARIABLE MulE expr ';' .

    $default  reduce using rule 19 (stmt)


state 93

   18 stmt: VARIABLE MinE expr ';' .

    $default  reduce using rule 18 (stmt)


state 94

   17 stmt: VARIABLE PluE expr ';' .

    $default  reduce using rule 17 (stmt)


state 95

   30 stmt: VARIABLE '(' arg_list ')' .

    $default  reduce using rule 30 (stmt)


state 96

   33 arg_list: expr ',' . arg_list

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    arg_list  go to state 107
    expr      go to state 66


state 97

   16 stmt: VARIABLE '=' expr ';' .

    $default  reduce using rule 16 (stmt)


state 98

   24 stmt: DO stmt UNTIL '(' . expr ')'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 108


state 99

   23 stmt: DO stmt WHILE '(' . expr ')'

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 109


state 100

   22 stmt: WHILE '(' expr ')' . stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 110
    expr     go to state 22


state 101

   26 stmt: IF '(' expr ')' . stmt
   27     | IF '(' expr ')' . stmt ELSE stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 111
    expr     go to state 22


state 102

   25 stmt: FOR '(' VARIABLE '=' . expr STEP expr TO expr ')' stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 112


state 103

    8 param_list: TYPE . VARIABLE
    9           | TYPE . VARIABLE ',' param_list

    VARIABLE  shift, and go to state 113


state 104

    3 function: PROC VARIABLE '(' ')' . '{' stmt '}' function

    '{'  shift, and go to state 114


state 105

    4 function: PROC VARIABLE '(' param_list . ')' '{' stmt '}' function

    ')'  shift, and go to state 115


state 106

    5 function: FUNC TYPE VARIABLE '(' . ')' '{' stmt '}' function
    6         | FUNC TYPE VARIABLE '(' . param_list ')' '{' stmt '}' function

    TYPE  shift, and go to state 103
    ')'   shift, and go to state 116

    param_list  go to state 117


state 107

   33 arg_list: expr ',' arg_list .

    $default  reduce using rule 33 (arg_list)


state 108

   24 stmt: DO stmt UNTIL '(' expr . ')'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ')'  shift, and go to state 118


state 109

   23 stmt: DO stmt WHILE '(' expr . ')'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ')'  shift, and go to state 119


state 110

   22 stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 22 (stmt)


state 111

   26 stmt: IF '(' expr ')' stmt .
   27     | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 120

    $default  reduce using rule 26 (stmt)


state 112

   25 stmt: FOR '(' VARIABLE '=' expr . STEP expr TO expr ')' stmt
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    STEP  shift, and go to state 121
    '>'   shift, and go to state 47
    '<'   shift, and go to state 48
    NE    shift, and go to state 49
    EQ    shift, and go to state 50
    LE    shift, and go to state 51
    GE    shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54
    '*'   shift, and go to state 55
    '/'   shift, and go to state 56
    '%'   shift, and go to state 57


state 113

    8 param_list: TYPE VARIABLE .
    9           | TYPE VARIABLE . ',' param_list

    ','  shift, and go to state 122

    $default  reduce using rule 8 (param_list)


state 114

    3 function: PROC VARIABLE '(' ')' '{' . stmt '}' function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 123
    expr     go to state 22


state 115

    4 function: PROC VARIABLE '(' param_list ')' . '{' stmt '}' function

    '{'  shift, and go to state 124


state 116

    5 function: FUNC TYPE VARIABLE '(' ')' . '{' stmt '}' function

    '{'  shift, and go to state 125


state 117

    6 function: FUNC TYPE VARIABLE '(' param_list . ')' '{' stmt '}' function

    ')'  shift, and go to state 126


state 118

   24 stmt: DO stmt UNTIL '(' expr ')' .

    $default  reduce using rule 24 (stmt)


state 119

   23 stmt: DO stmt WHILE '(' expr ')' .

    $default  reduce using rule 23 (stmt)


state 120

   27 stmt: IF '(' expr ')' stmt ELSE . stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 127
    expr     go to state 22


state 121

   25 stmt: FOR '(' VARIABLE '=' expr STEP . expr TO expr ')' stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 128


state 122

    9 param_list: TYPE VARIABLE ',' . param_list

    TYPE  shift, and go to state 103

    param_list  go to state 129


state 123

    3 function: PROC VARIABLE '(' ')' '{' stmt . '}' function

    '}'  shift, and go to state 130


state 124

    4 function: PROC VARIABLE '(' param_list ')' '{' . stmt '}' function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 131
    expr     go to state 22


state 125

    5 function: FUNC TYPE VARIABLE '(' ')' '{' . stmt '}' function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 132
    expr     go to state 22


state 126

    6 function: FUNC TYPE VARIABLE '(' param_list ')' . '{' stmt '}' function

    '{'  shift, and go to state 133


state 127

   27 stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 27 (stmt)


state 128

   25 stmt: FOR '(' VARIABLE '=' expr STEP expr . TO expr ')' stmt
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    TO   shift, and go to state 134
    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57


state 129

    9 param_list: TYPE VARIABLE ',' param_list .

    $default  reduce using rule 9 (param_list)


state 130

    3 function: PROC VARIABLE '(' ')' '{' stmt '}' . function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    PROC      shift, and go to state 11
    FUNC      shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    $default  reduce using rule 7 (function)

    function  go to state 135
    def_var   go to state 20
    stmt      go to state 21
    expr      go to state 22


state 131

    4 function: PROC VARIABLE '(' param_list ')' '{' stmt . '}' function

    '}'  shift, and go to state 136


state 132

    5 function: FUNC TYPE VARIABLE '(' ')' '{' stmt . '}' function

    '}'  shift, and go to state 137


state 133

    6 function: FUNC TYPE VARIABLE '(' param_list ')' '{' . stmt '}' function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 138
    expr     go to state 22


state 134

   25 stmt: FOR '(' VARIABLE '=' expr STEP expr TO . expr ')' stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 34
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    expr  go to state 139


state 135

    3 function: PROC VARIABLE '(' ')' '{' stmt '}' function .

    $default  reduce using rule 3 (function)


state 136

    4 function: PROC VARIABLE '(' param_list ')' '{' stmt '}' . function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    PROC      shift, and go to state 11
    FUNC      shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    $default  reduce using rule 7 (function)

    function  go to state 140
    def_var   go to state 20
    stmt      go to state 21
    expr      go to state 22


state 137

    5 function: FUNC TYPE VARIABLE '(' ')' '{' stmt '}' . function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    PROC      shift, and go to state 11
    FUNC      shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    $default  reduce using rule 7 (function)

    function  go to state 141
    def_var   go to state 20
    stmt      go to state 21
    expr      go to state 22


state 138

    6 function: FUNC TYPE VARIABLE '(' param_list ')' '{' stmt . '}' function

    '}'  shift, and go to state 142


state 139

   25 stmt: FOR '(' VARIABLE '=' expr STEP expr TO expr . ')' stmt
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . '%' expr
   47     | expr . GE expr
   48     | expr . LE expr
   49     | expr . NE expr
   50     | expr . EQ expr

    '>'  shift, and go to state 47
    '<'  shift, and go to state 48
    NE   shift, and go to state 49
    EQ   shift, and go to state 50
    LE   shift, and go to state 51
    GE   shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57
    ')'  shift, and go to state 143


state 140

    4 function: PROC VARIABLE '(' param_list ')' '{' stmt '}' function .

    $default  reduce using rule 4 (function)


state 141

    5 function: FUNC TYPE VARIABLE '(' ')' '{' stmt '}' function .

    $default  reduce using rule 5 (function)


state 142

    6 function: FUNC TYPE VARIABLE '(' param_list ')' '{' stmt '}' . function

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    PROC      shift, and go to state 11
    FUNC      shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    $default  reduce using rule 7 (function)

    function  go to state 144
    def_var   go to state 20
    stmt      go to state 21
    expr      go to state 22


state 143

   25 stmt: FOR '(' VARIABLE '=' expr STEP expr TO expr ')' . stmt

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    VARIABLE  shift, and go to state 3
    TYPE      shift, and go to state 4
    DO        shift, and go to state 5
    WHILE     shift, and go to state 6
    IF        shift, and go to state 7
    PRINT     shift, and go to state 8
    FOR       shift, and go to state 9
    COMMENT   shift, and go to state 10
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 16
    ';'       shift, and go to state 17

    def_var  go to state 20
    stmt     go to state 145
    expr     go to state 22


state 144

    6 function: FUNC TYPE VARIABLE '(' param_list ')' '{' stmt '}' function .

    $default  reduce using rule 6 (function)


state 145

   25 stmt: FOR '(' VARIABLE '=' expr STEP expr TO expr ')' stmt .

    $default  reduce using rule 25 (stmt)
